import { generateCstDts, type Rule } from "chevrotain";
import { FemaScriptLanguageParser } from "../../src/grammar/parser";

const parser = new FemaScriptLanguageParser();

const generateCstNodeTypes = () =>
  parser
    .getSerializedGastProductions()
    .map((production) => {
      if (production.type !== "Rule") return;
      const { name: ruleName } = production as unknown as Rule;

      const nodeName = ruleName[0].toUpperCase() + ruleName.slice(1);

      return `  ${ruleName}: ${nodeName}CstNode;`;
    })
    .filter(String)
    .join("\n");

const generateDtsFromCst = () =>
  generateCstDts(parser.getGAstProductions())
    .replace(/Children/g, "Context")
    .replace(/\(children:/g, "(ctx:");

const generateNodesVisitorsInterfaces = () =>
  Object.keys(parser.getGAstProductions())
    .map((productionName) => {
      const name = productionName[0].toUpperCase() + productionName.slice(1);
      return `export interface ${name}Visitor<OUT = void> { ${productionName}(ctx: ${name}CstContext): OUT }`;
    })
    .join("\n");

export const generateDts = () => `/**
 * * This file was generated by the script generate-dts.ts;
 *
 * ! DO NOT MODIFY IT MANUALLY, ALL CHANGES WILL BE OVERWRITTEN !
 */

${generateDtsFromCst()}
/**
 * Individual Visitors interfaces
 */
${generateNodesVisitorsInterfaces()}

export type CstNodeTypes = {
${generateCstNodeTypes()}
};
`;
